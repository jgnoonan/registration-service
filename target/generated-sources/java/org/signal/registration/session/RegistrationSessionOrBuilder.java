// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: session.proto

// Protobuf Java Version: 3.25.5
package org.signal.registration.session;

public interface RegistrationSessionOrBuilder extends
    // @@protoc_insertion_point(interface_extends:org.signal.registration.session.RegistrationSession)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   **
   * The E.164-formatted representation of the phone number being registered in
   * this session.
   * </pre>
   *
   * <code>string phone_number = 1;</code>
   * @return The phoneNumber.
   */
  java.lang.String getPhoneNumber();
  /**
   * <pre>
   **
   * The E.164-formatted representation of the phone number being registered in
   * this session.
   * </pre>
   *
   * <code>string phone_number = 1;</code>
   * @return The bytes for phoneNumber.
   */
  com.google.protobuf.ByteString
      getPhoneNumberBytes();

  /**
   * <pre>
   **
   * The successfully-verified code associated with this session. If this field
   * is not blank, the remote client has successfully verified their
   * registration. Callers may use this value to de-duplicate verification
   * attempts (i.e. repeated submissions from a remote client due to an
   * interrupted connection).
   * </pre>
   *
   * <code>string verified_code = 4;</code>
   * @return The verifiedCode.
   */
  java.lang.String getVerifiedCode();
  /**
   * <pre>
   **
   * The successfully-verified code associated with this session. If this field
   * is not blank, the remote client has successfully verified their
   * registration. Callers may use this value to de-duplicate verification
   * attempts (i.e. repeated submissions from a remote client due to an
   * interrupted connection).
   * </pre>
   *
   * <code>string verified_code = 4;</code>
   * @return The bytes for verifiedCode.
   */
  com.google.protobuf.ByteString
      getVerifiedCodeBytes();

  /**
   * <code>repeated .org.signal.registration.session.RegistrationAttempt registration_attempts = 5;</code>
   */
  java.util.List<org.signal.registration.session.RegistrationAttempt> 
      getRegistrationAttemptsList();
  /**
   * <code>repeated .org.signal.registration.session.RegistrationAttempt registration_attempts = 5;</code>
   */
  org.signal.registration.session.RegistrationAttempt getRegistrationAttempts(int index);
  /**
   * <code>repeated .org.signal.registration.session.RegistrationAttempt registration_attempts = 5;</code>
   */
  int getRegistrationAttemptsCount();
  /**
   * <code>repeated .org.signal.registration.session.RegistrationAttempt registration_attempts = 5;</code>
   */
  java.util.List<? extends org.signal.registration.session.RegistrationAttemptOrBuilder> 
      getRegistrationAttemptsOrBuilderList();
  /**
   * <code>repeated .org.signal.registration.session.RegistrationAttempt registration_attempts = 5;</code>
   */
  org.signal.registration.session.RegistrationAttemptOrBuilder getRegistrationAttemptsOrBuilder(
      int index);

  /**
   * <pre>
   **
   * A unique identifier for this session.
   * </pre>
   *
   * <code>bytes id = 6;</code>
   * @return The id.
   */
  com.google.protobuf.ByteString getId();

  /**
   * <pre>
   **
   * The number of times a caller has attempted to check a verification code for
   * the active registration attempt.
   * </pre>
   *
   * <code>uint32 check_code_attempts = 7;</code>
   * @return The checkCodeAttempts.
   */
  int getCheckCodeAttempts();

  /**
   * <pre>
   **
   * The UNIX timestamp (in milliseconds) at which a caller last attempted to
   * check a verification code for the active registration attempt.
   * </pre>
   *
   * <code>uint64 last_check_code_attempt_epoch_millis = 8;</code>
   * @return The lastCheckCodeAttemptEpochMillis.
   */
  long getLastCheckCodeAttemptEpochMillis();

  /**
   * <pre>
   **
   * The UNIX timestamp (in milliseconds) after which this session will expire.
   * </pre>
   *
   * <code>uint64 expiration_epoch_millis = 9;</code>
   * @return The expirationEpochMillis.
   */
  long getExpirationEpochMillis();

  /**
   * <pre>
   **
   * The UNIX timestamp (in milliseconds) at which this session was created.
   * </pre>
   *
   * <code>uint64 created_epoch_millis = 10;</code>
   * @return The createdEpochMillis.
   */
  long getCreatedEpochMillis();

  /**
   * <code>.org.signal.registration.session.SessionMetadata session_metadata = 11;</code>
   * @return Whether the sessionMetadata field is set.
   */
  boolean hasSessionMetadata();
  /**
   * <code>.org.signal.registration.session.SessionMetadata session_metadata = 11;</code>
   * @return The sessionMetadata.
   */
  org.signal.registration.session.SessionMetadata getSessionMetadata();
  /**
   * <code>.org.signal.registration.session.SessionMetadata session_metadata = 11;</code>
   */
  org.signal.registration.session.SessionMetadataOrBuilder getSessionMetadataOrBuilder();

  /**
   * <pre>
   **
   * A list of transports that have been rejected by senders when attempting to
   * send verification codes in the scope of this session.
   * </pre>
   *
   * <code>repeated .org.signal.registration.rpc.MessageTransport rejected_transports = 12;</code>
   * @return A list containing the rejectedTransports.
   */
  java.util.List<org.signal.registration.rpc.MessageTransport> getRejectedTransportsList();
  /**
   * <pre>
   **
   * A list of transports that have been rejected by senders when attempting to
   * send verification codes in the scope of this session.
   * </pre>
   *
   * <code>repeated .org.signal.registration.rpc.MessageTransport rejected_transports = 12;</code>
   * @return The count of rejectedTransports.
   */
  int getRejectedTransportsCount();
  /**
   * <pre>
   **
   * A list of transports that have been rejected by senders when attempting to
   * send verification codes in the scope of this session.
   * </pre>
   *
   * <code>repeated .org.signal.registration.rpc.MessageTransport rejected_transports = 12;</code>
   * @param index The index of the element to return.
   * @return The rejectedTransports at the given index.
   */
  org.signal.registration.rpc.MessageTransport getRejectedTransports(int index);
  /**
   * <pre>
   **
   * A list of transports that have been rejected by senders when attempting to
   * send verification codes in the scope of this session.
   * </pre>
   *
   * <code>repeated .org.signal.registration.rpc.MessageTransport rejected_transports = 12;</code>
   * @return A list containing the enum numeric values on the wire for rejectedTransports.
   */
  java.util.List<java.lang.Integer>
  getRejectedTransportsValueList();
  /**
   * <pre>
   **
   * A list of transports that have been rejected by senders when attempting to
   * send verification codes in the scope of this session.
   * </pre>
   *
   * <code>repeated .org.signal.registration.rpc.MessageTransport rejected_transports = 12;</code>
   * @param index The index of the value to return.
   * @return The enum numeric value on the wire of rejectedTransports at the given index.
   */
  int getRejectedTransportsValue(int index);

  /**
   * <pre>
   **
   * A list of attempts that failed to send
   * </pre>
   *
   * <code>repeated .org.signal.registration.session.FailedSendAttempt failed_attempts = 13;</code>
   */
  java.util.List<org.signal.registration.session.FailedSendAttempt> 
      getFailedAttemptsList();
  /**
   * <pre>
   **
   * A list of attempts that failed to send
   * </pre>
   *
   * <code>repeated .org.signal.registration.session.FailedSendAttempt failed_attempts = 13;</code>
   */
  org.signal.registration.session.FailedSendAttempt getFailedAttempts(int index);
  /**
   * <pre>
   **
   * A list of attempts that failed to send
   * </pre>
   *
   * <code>repeated .org.signal.registration.session.FailedSendAttempt failed_attempts = 13;</code>
   */
  int getFailedAttemptsCount();
  /**
   * <pre>
   **
   * A list of attempts that failed to send
   * </pre>
   *
   * <code>repeated .org.signal.registration.session.FailedSendAttempt failed_attempts = 13;</code>
   */
  java.util.List<? extends org.signal.registration.session.FailedSendAttemptOrBuilder> 
      getFailedAttemptsOrBuilderList();
  /**
   * <pre>
   **
   * A list of attempts that failed to send
   * </pre>
   *
   * <code>repeated .org.signal.registration.session.FailedSendAttempt failed_attempts = 13;</code>
   */
  org.signal.registration.session.FailedSendAttemptOrBuilder getFailedAttemptsOrBuilder(
      int index);
}
