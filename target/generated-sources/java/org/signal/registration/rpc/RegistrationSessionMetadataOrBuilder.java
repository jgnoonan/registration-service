// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: registration_service.proto

// Protobuf Java Version: 3.25.5
package org.signal.registration.rpc;

public interface RegistrationSessionMetadataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:org.signal.registration.rpc.RegistrationSessionMetadata)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   **
   * An opaque sequence of bytes that uniquely identifies the registration
   * session associated with this registration attempt.
   * </pre>
   *
   * <code>bytes session_id = 1;</code>
   * @return The sessionId.
   */
  com.google.protobuf.ByteString getSessionId();

  /**
   * <pre>
   **
   * Indicates whether a valid verification code has been submitted in the scope
   * of this session.
   * </pre>
   *
   * <code>bool verified = 2;</code>
   * @return The verified.
   */
  boolean getVerified();

  /**
   * <pre>
   **
   * The phone number associated with this registration session.
   * </pre>
   *
   * <code>uint64 e164 = 3;</code>
   * @return The e164.
   */
  long getE164();

  /**
   * <pre>
   **
   * Indicates whether the caller may request delivery of a verification code
   * via SMS now or at some time in the future. If true, the time a caller must
   * wait before requesting a verification code via SMS is given in the
   * `next_sms_seconds` field.
   * </pre>
   *
   * <code>bool may_request_sms = 4;</code>
   * @return The mayRequestSms.
   */
  boolean getMayRequestSms();

  /**
   * <pre>
   **
   * The duration, in seconds, after which a caller will next be allowed to
   * request delivery of a verification code via SMS if `may_request_sms` is
   * true. If zero, a caller may request a verification code via SMS
   * immediately. If `may_request_sms` is false, this field has no meaning.
   * </pre>
   *
   * <code>uint64 next_sms_seconds = 5;</code>
   * @return The nextSmsSeconds.
   */
  long getNextSmsSeconds();

  /**
   * <pre>
   **
   * Indicates whether the caller may request delivery of a verification code
   * via a phone call now or at some time in the future. If true, the time a
   * caller must wait before requesting a verification code via SMS is given in
   * the `next_voice_call_seconds` field. If false, simply waiting will not
   * allow the caller to request a phone call and the caller may need to
   * perform some other action (like attempting verification code delivery via
   * SMS) before requesting a voice call.
   * </pre>
   *
   * <code>bool may_request_voice_call = 6;</code>
   * @return The mayRequestVoiceCall.
   */
  boolean getMayRequestVoiceCall();

  /**
   * <pre>
   **
   * The duration, in seconds, after which a caller will next be allowed to
   * request delivery of a verification code via a phone call if
   * `may_request_voice_call` is true. If zero, a caller may request a
   * verification code via a phone call immediately. If `may_request_voice_call`
   * is false, this field has no meaning.
   * </pre>
   *
   * <code>uint64 next_voice_call_seconds = 7;</code>
   * @return The nextVoiceCallSeconds.
   */
  long getNextVoiceCallSeconds();

  /**
   * <pre>
   **
   * Indicates whether the caller may submit new verification codes now or at
   * some time in the future. If true, the time a caller must wait before
   * submitting a verification code is given in the `next_code_check_seconds`
   * field. If false, simply waiting will not allow the caller to submit a
   * verification code and the caller may need to perform some other action
   * (like requesting delivery of a verification code) before checking a
   * verification code.
   * </pre>
   *
   * <code>bool may_check_code = 8;</code>
   * @return The mayCheckCode.
   */
  boolean getMayCheckCode();

  /**
   * <pre>
   **
   * The duration, in seconds, after which a caller will next be allowed to
   * submit a verification code if `may_check_code` is true. If zero, a caller
   * may submit a verification code immediately. If `may_check_code` is false,
   * this field has no meaning.
   * </pre>
   *
   * <code>uint64 next_code_check_seconds = 9;</code>
   * @return The nextCodeCheckSeconds.
   */
  long getNextCodeCheckSeconds();

  /**
   * <pre>
   **
   * The duration, in seconds, after which this session will expire.
   * </pre>
   *
   * <code>uint64 expiration_seconds = 10;</code>
   * @return The expirationSeconds.
   */
  long getExpirationSeconds();
}
