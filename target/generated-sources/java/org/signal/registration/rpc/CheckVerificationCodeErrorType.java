// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: registration_service.proto

// Protobuf Java Version: 3.25.5
package org.signal.registration.rpc;

/**
 * Protobuf enum {@code org.signal.registration.rpc.CheckVerificationCodeErrorType}
 */
public enum CheckVerificationCodeErrorType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>CHECK_VERIFICATION_CODE_ERROR_TYPE_UNSPECIFIED = 0;</code>
   */
  CHECK_VERIFICATION_CODE_ERROR_TYPE_UNSPECIFIED(0),
  /**
   * <pre>
   **
   * The caller has attempted to submit a verification code even though no
   * verification codes have been sent within the scope of this session. The
   * caller must issue a "send code" request before trying again.
   * </pre>
   *
   * <code>CHECK_VERIFICATION_CODE_ERROR_TYPE_NO_CODE_SENT = 1;</code>
   */
  CHECK_VERIFICATION_CODE_ERROR_TYPE_NO_CODE_SENT(1),
  /**
   * <pre>
   **
   * The caller has made too many guesses within some period of time. Callers
   * should wait for the duration prescribed in the session metadata object
   * elsewhere in the response before trying again.
   * </pre>
   *
   * <code>CHECK_VERIFICATION_CODE_ERROR_TYPE_RATE_LIMITED = 2;</code>
   */
  CHECK_VERIFICATION_CODE_ERROR_TYPE_RATE_LIMITED(2),
  /**
   * <pre>
   **
   * The session identified in this request could not be found (possibly due to
   * session expiration).
   * </pre>
   *
   * <code>CHECK_VERIFICATION_CODE_ERROR_TYPE_SESSION_NOT_FOUND = 3;</code>
   */
  CHECK_VERIFICATION_CODE_ERROR_TYPE_SESSION_NOT_FOUND(3),
  /**
   * <pre>
   **
   * The session identified in this request is still active, but the most
   * recently-sent code has expired. Callers should request a new code, then
   * try again.
   * </pre>
   *
   * <code>CHECK_VERIFICATION_CODE_ERROR_TYPE_ATTEMPT_EXPIRED = 4;</code>
   */
  CHECK_VERIFICATION_CODE_ERROR_TYPE_ATTEMPT_EXPIRED(4),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>CHECK_VERIFICATION_CODE_ERROR_TYPE_UNSPECIFIED = 0;</code>
   */
  public static final int CHECK_VERIFICATION_CODE_ERROR_TYPE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   **
   * The caller has attempted to submit a verification code even though no
   * verification codes have been sent within the scope of this session. The
   * caller must issue a "send code" request before trying again.
   * </pre>
   *
   * <code>CHECK_VERIFICATION_CODE_ERROR_TYPE_NO_CODE_SENT = 1;</code>
   */
  public static final int CHECK_VERIFICATION_CODE_ERROR_TYPE_NO_CODE_SENT_VALUE = 1;
  /**
   * <pre>
   **
   * The caller has made too many guesses within some period of time. Callers
   * should wait for the duration prescribed in the session metadata object
   * elsewhere in the response before trying again.
   * </pre>
   *
   * <code>CHECK_VERIFICATION_CODE_ERROR_TYPE_RATE_LIMITED = 2;</code>
   */
  public static final int CHECK_VERIFICATION_CODE_ERROR_TYPE_RATE_LIMITED_VALUE = 2;
  /**
   * <pre>
   **
   * The session identified in this request could not be found (possibly due to
   * session expiration).
   * </pre>
   *
   * <code>CHECK_VERIFICATION_CODE_ERROR_TYPE_SESSION_NOT_FOUND = 3;</code>
   */
  public static final int CHECK_VERIFICATION_CODE_ERROR_TYPE_SESSION_NOT_FOUND_VALUE = 3;
  /**
   * <pre>
   **
   * The session identified in this request is still active, but the most
   * recently-sent code has expired. Callers should request a new code, then
   * try again.
   * </pre>
   *
   * <code>CHECK_VERIFICATION_CODE_ERROR_TYPE_ATTEMPT_EXPIRED = 4;</code>
   */
  public static final int CHECK_VERIFICATION_CODE_ERROR_TYPE_ATTEMPT_EXPIRED_VALUE = 4;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static CheckVerificationCodeErrorType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static CheckVerificationCodeErrorType forNumber(int value) {
    switch (value) {
      case 0: return CHECK_VERIFICATION_CODE_ERROR_TYPE_UNSPECIFIED;
      case 1: return CHECK_VERIFICATION_CODE_ERROR_TYPE_NO_CODE_SENT;
      case 2: return CHECK_VERIFICATION_CODE_ERROR_TYPE_RATE_LIMITED;
      case 3: return CHECK_VERIFICATION_CODE_ERROR_TYPE_SESSION_NOT_FOUND;
      case 4: return CHECK_VERIFICATION_CODE_ERROR_TYPE_ATTEMPT_EXPIRED;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<CheckVerificationCodeErrorType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      CheckVerificationCodeErrorType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<CheckVerificationCodeErrorType>() {
          public CheckVerificationCodeErrorType findValueByNumber(int number) {
            return CheckVerificationCodeErrorType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return org.signal.registration.rpc.RegistrationServiceOuterClass.getDescriptor().getEnumTypes().get(5);
  }

  private static final CheckVerificationCodeErrorType[] VALUES = values();

  public static CheckVerificationCodeErrorType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private CheckVerificationCodeErrorType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:org.signal.registration.rpc.CheckVerificationCodeErrorType)
}

