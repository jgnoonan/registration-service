// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: registration_service.proto

// Protobuf Java Version: 3.25.5
package org.signal.registration.rpc;

/**
 * Protobuf enum {@code org.signal.registration.rpc.SendVerificationCodeErrorType}
 */
public enum SendVerificationCodeErrorType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>SEND_VERIFICATION_CODE_ERROR_TYPE_UNSPECIFIED = 0;</code>
   */
  SEND_VERIFICATION_CODE_ERROR_TYPE_UNSPECIFIED(0),
  /**
   * <pre>
   **
   * The sender received and understood the request to send a verification code,
   * but declined to do so (e.g. due to rate limits, an invalid argument).
   * </pre>
   *
   * <code>SEND_VERIFICATION_CODE_ERROR_TYPE_SENDER_REJECTED = 1;</code>
   */
  SEND_VERIFICATION_CODE_ERROR_TYPE_SENDER_REJECTED(1),
  /**
   * <pre>
   **
   * A verification could could not be sent via the requested channel due to
   * timing/rate restrictions. The response object containing this error should
   * include session metadata that indicates when the next attempt is allowed.
   * </pre>
   *
   * <code>SEND_VERIFICATION_CODE_ERROR_TYPE_RATE_LIMITED = 3;</code>
   */
  SEND_VERIFICATION_CODE_ERROR_TYPE_RATE_LIMITED(3),
  /**
   * <pre>
   **
   * No session was found with the given ID.
   * </pre>
   *
   * <code>SEND_VERIFICATION_CODE_ERROR_TYPE_SESSION_NOT_FOUND = 4;</code>
   */
  SEND_VERIFICATION_CODE_ERROR_TYPE_SESSION_NOT_FOUND(4),
  /**
   * <pre>
   **
   * A new verification code could not be sent because the session has already
   * been verified.
   * </pre>
   *
   * <code>SEND_VERIFICATION_CODE_ERROR_TYPE_SESSION_ALREADY_VERIFIED = 5;</code>
   */
  SEND_VERIFICATION_CODE_ERROR_TYPE_SESSION_ALREADY_VERIFIED(5),
  /**
   * <pre>
   **
   * A verification code could not be sent via the requested transport because
   * the destination phone number (or the sender) does not support the requested
   * transport.
   * </pre>
   *
   * <code>SEND_VERIFICATION_CODE_ERROR_TYPE_TRANSPORT_NOT_ALLOWED = 6;</code>
   */
  SEND_VERIFICATION_CODE_ERROR_TYPE_TRANSPORT_NOT_ALLOWED(6),
  /**
   * <pre>
   **
   * The sender declined to send the verification code due to suspected fraud
   * </pre>
   *
   * <code>SEND_VERIFICATION_CODE_ERROR_TYPE_SUSPECTED_FRAUD = 7;</code>
   */
  SEND_VERIFICATION_CODE_ERROR_TYPE_SUSPECTED_FRAUD(7),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>SEND_VERIFICATION_CODE_ERROR_TYPE_UNSPECIFIED = 0;</code>
   */
  public static final int SEND_VERIFICATION_CODE_ERROR_TYPE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   **
   * The sender received and understood the request to send a verification code,
   * but declined to do so (e.g. due to rate limits, an invalid argument).
   * </pre>
   *
   * <code>SEND_VERIFICATION_CODE_ERROR_TYPE_SENDER_REJECTED = 1;</code>
   */
  public static final int SEND_VERIFICATION_CODE_ERROR_TYPE_SENDER_REJECTED_VALUE = 1;
  /**
   * <pre>
   **
   * A verification could could not be sent via the requested channel due to
   * timing/rate restrictions. The response object containing this error should
   * include session metadata that indicates when the next attempt is allowed.
   * </pre>
   *
   * <code>SEND_VERIFICATION_CODE_ERROR_TYPE_RATE_LIMITED = 3;</code>
   */
  public static final int SEND_VERIFICATION_CODE_ERROR_TYPE_RATE_LIMITED_VALUE = 3;
  /**
   * <pre>
   **
   * No session was found with the given ID.
   * </pre>
   *
   * <code>SEND_VERIFICATION_CODE_ERROR_TYPE_SESSION_NOT_FOUND = 4;</code>
   */
  public static final int SEND_VERIFICATION_CODE_ERROR_TYPE_SESSION_NOT_FOUND_VALUE = 4;
  /**
   * <pre>
   **
   * A new verification code could not be sent because the session has already
   * been verified.
   * </pre>
   *
   * <code>SEND_VERIFICATION_CODE_ERROR_TYPE_SESSION_ALREADY_VERIFIED = 5;</code>
   */
  public static final int SEND_VERIFICATION_CODE_ERROR_TYPE_SESSION_ALREADY_VERIFIED_VALUE = 5;
  /**
   * <pre>
   **
   * A verification code could not be sent via the requested transport because
   * the destination phone number (or the sender) does not support the requested
   * transport.
   * </pre>
   *
   * <code>SEND_VERIFICATION_CODE_ERROR_TYPE_TRANSPORT_NOT_ALLOWED = 6;</code>
   */
  public static final int SEND_VERIFICATION_CODE_ERROR_TYPE_TRANSPORT_NOT_ALLOWED_VALUE = 6;
  /**
   * <pre>
   **
   * The sender declined to send the verification code due to suspected fraud
   * </pre>
   *
   * <code>SEND_VERIFICATION_CODE_ERROR_TYPE_SUSPECTED_FRAUD = 7;</code>
   */
  public static final int SEND_VERIFICATION_CODE_ERROR_TYPE_SUSPECTED_FRAUD_VALUE = 7;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static SendVerificationCodeErrorType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static SendVerificationCodeErrorType forNumber(int value) {
    switch (value) {
      case 0: return SEND_VERIFICATION_CODE_ERROR_TYPE_UNSPECIFIED;
      case 1: return SEND_VERIFICATION_CODE_ERROR_TYPE_SENDER_REJECTED;
      case 3: return SEND_VERIFICATION_CODE_ERROR_TYPE_RATE_LIMITED;
      case 4: return SEND_VERIFICATION_CODE_ERROR_TYPE_SESSION_NOT_FOUND;
      case 5: return SEND_VERIFICATION_CODE_ERROR_TYPE_SESSION_ALREADY_VERIFIED;
      case 6: return SEND_VERIFICATION_CODE_ERROR_TYPE_TRANSPORT_NOT_ALLOWED;
      case 7: return SEND_VERIFICATION_CODE_ERROR_TYPE_SUSPECTED_FRAUD;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SendVerificationCodeErrorType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      SendVerificationCodeErrorType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<SendVerificationCodeErrorType>() {
          public SendVerificationCodeErrorType findValueByNumber(int number) {
            return SendVerificationCodeErrorType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return org.signal.registration.rpc.RegistrationServiceOuterClass.getDescriptor().getEnumTypes().get(4);
  }

  private static final SendVerificationCodeErrorType[] VALUES = values();

  public static SendVerificationCodeErrorType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SendVerificationCodeErrorType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:org.signal.registration.rpc.SendVerificationCodeErrorType)
}

