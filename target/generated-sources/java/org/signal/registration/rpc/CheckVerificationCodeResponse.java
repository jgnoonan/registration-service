// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: registration_service.proto

// Protobuf Java Version: 3.25.5
package org.signal.registration.rpc;

/**
 * Protobuf type {@code org.signal.registration.rpc.CheckVerificationCodeResponse}
 */
public final class CheckVerificationCodeResponse extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:org.signal.registration.rpc.CheckVerificationCodeResponse)
    CheckVerificationCodeResponseOrBuilder {
private static final long serialVersionUID = 0L;
  // Use CheckVerificationCodeResponse.newBuilder() to construct.
  private CheckVerificationCodeResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CheckVerificationCodeResponse() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new CheckVerificationCodeResponse();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.signal.registration.rpc.RegistrationServiceOuterClass.internal_static_org_signal_registration_rpc_CheckVerificationCodeResponse_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.signal.registration.rpc.RegistrationServiceOuterClass.internal_static_org_signal_registration_rpc_CheckVerificationCodeResponse_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.signal.registration.rpc.CheckVerificationCodeResponse.class, org.signal.registration.rpc.CheckVerificationCodeResponse.Builder.class);
  }

  private int bitField0_;
  public static final int SESSION_METADATA_FIELD_NUMBER = 2;
  private org.signal.registration.rpc.RegistrationSessionMetadata sessionMetadata_;
  /**
   * <pre>
   **
   * Metadata for the named session. May be absent if the session could not be
   * found or has expired.
   * </pre>
   *
   * <code>.org.signal.registration.rpc.RegistrationSessionMetadata session_metadata = 2;</code>
   * @return Whether the sessionMetadata field is set.
   */
  @java.lang.Override
  public boolean hasSessionMetadata() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   **
   * Metadata for the named session. May be absent if the session could not be
   * found or has expired.
   * </pre>
   *
   * <code>.org.signal.registration.rpc.RegistrationSessionMetadata session_metadata = 2;</code>
   * @return The sessionMetadata.
   */
  @java.lang.Override
  public org.signal.registration.rpc.RegistrationSessionMetadata getSessionMetadata() {
    return sessionMetadata_ == null ? org.signal.registration.rpc.RegistrationSessionMetadata.getDefaultInstance() : sessionMetadata_;
  }
  /**
   * <pre>
   **
   * Metadata for the named session. May be absent if the session could not be
   * found or has expired.
   * </pre>
   *
   * <code>.org.signal.registration.rpc.RegistrationSessionMetadata session_metadata = 2;</code>
   */
  @java.lang.Override
  public org.signal.registration.rpc.RegistrationSessionMetadataOrBuilder getSessionMetadataOrBuilder() {
    return sessionMetadata_ == null ? org.signal.registration.rpc.RegistrationSessionMetadata.getDefaultInstance() : sessionMetadata_;
  }

  public static final int ERROR_FIELD_NUMBER = 3;
  private org.signal.registration.rpc.CheckVerificationCodeError error_;
  /**
   * <pre>
   **
   * If a code could not be checked, explains the underlying error. Will be
   * absent if no error occurred. Note that both an error and session
   * metadata may be present in the same response because the session metadata
   * may include information helpful for resolving the underlying error (i.e.
   * "next attempt" times).
   * </pre>
   *
   * <code>.org.signal.registration.rpc.CheckVerificationCodeError error = 3;</code>
   * @return Whether the error field is set.
   */
  @java.lang.Override
  public boolean hasError() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   **
   * If a code could not be checked, explains the underlying error. Will be
   * absent if no error occurred. Note that both an error and session
   * metadata may be present in the same response because the session metadata
   * may include information helpful for resolving the underlying error (i.e.
   * "next attempt" times).
   * </pre>
   *
   * <code>.org.signal.registration.rpc.CheckVerificationCodeError error = 3;</code>
   * @return The error.
   */
  @java.lang.Override
  public org.signal.registration.rpc.CheckVerificationCodeError getError() {
    return error_ == null ? org.signal.registration.rpc.CheckVerificationCodeError.getDefaultInstance() : error_;
  }
  /**
   * <pre>
   **
   * If a code could not be checked, explains the underlying error. Will be
   * absent if no error occurred. Note that both an error and session
   * metadata may be present in the same response because the session metadata
   * may include information helpful for resolving the underlying error (i.e.
   * "next attempt" times).
   * </pre>
   *
   * <code>.org.signal.registration.rpc.CheckVerificationCodeError error = 3;</code>
   */
  @java.lang.Override
  public org.signal.registration.rpc.CheckVerificationCodeErrorOrBuilder getErrorOrBuilder() {
    return error_ == null ? org.signal.registration.rpc.CheckVerificationCodeError.getDefaultInstance() : error_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(2, getSessionMetadata());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(3, getError());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getSessionMetadata());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getError());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.signal.registration.rpc.CheckVerificationCodeResponse)) {
      return super.equals(obj);
    }
    org.signal.registration.rpc.CheckVerificationCodeResponse other = (org.signal.registration.rpc.CheckVerificationCodeResponse) obj;

    if (hasSessionMetadata() != other.hasSessionMetadata()) return false;
    if (hasSessionMetadata()) {
      if (!getSessionMetadata()
          .equals(other.getSessionMetadata())) return false;
    }
    if (hasError() != other.hasError()) return false;
    if (hasError()) {
      if (!getError()
          .equals(other.getError())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasSessionMetadata()) {
      hash = (37 * hash) + SESSION_METADATA_FIELD_NUMBER;
      hash = (53 * hash) + getSessionMetadata().hashCode();
    }
    if (hasError()) {
      hash = (37 * hash) + ERROR_FIELD_NUMBER;
      hash = (53 * hash) + getError().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.signal.registration.rpc.CheckVerificationCodeResponse parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.signal.registration.rpc.CheckVerificationCodeResponse parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.signal.registration.rpc.CheckVerificationCodeResponse parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.signal.registration.rpc.CheckVerificationCodeResponse parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.signal.registration.rpc.CheckVerificationCodeResponse parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.signal.registration.rpc.CheckVerificationCodeResponse parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.signal.registration.rpc.CheckVerificationCodeResponse parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.signal.registration.rpc.CheckVerificationCodeResponse parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static org.signal.registration.rpc.CheckVerificationCodeResponse parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static org.signal.registration.rpc.CheckVerificationCodeResponse parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.signal.registration.rpc.CheckVerificationCodeResponse parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.signal.registration.rpc.CheckVerificationCodeResponse parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.signal.registration.rpc.CheckVerificationCodeResponse prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code org.signal.registration.rpc.CheckVerificationCodeResponse}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:org.signal.registration.rpc.CheckVerificationCodeResponse)
      org.signal.registration.rpc.CheckVerificationCodeResponseOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.signal.registration.rpc.RegistrationServiceOuterClass.internal_static_org_signal_registration_rpc_CheckVerificationCodeResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.signal.registration.rpc.RegistrationServiceOuterClass.internal_static_org_signal_registration_rpc_CheckVerificationCodeResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.signal.registration.rpc.CheckVerificationCodeResponse.class, org.signal.registration.rpc.CheckVerificationCodeResponse.Builder.class);
    }

    // Construct using org.signal.registration.rpc.CheckVerificationCodeResponse.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getSessionMetadataFieldBuilder();
        getErrorFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      sessionMetadata_ = null;
      if (sessionMetadataBuilder_ != null) {
        sessionMetadataBuilder_.dispose();
        sessionMetadataBuilder_ = null;
      }
      error_ = null;
      if (errorBuilder_ != null) {
        errorBuilder_.dispose();
        errorBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.signal.registration.rpc.RegistrationServiceOuterClass.internal_static_org_signal_registration_rpc_CheckVerificationCodeResponse_descriptor;
    }

    @java.lang.Override
    public org.signal.registration.rpc.CheckVerificationCodeResponse getDefaultInstanceForType() {
      return org.signal.registration.rpc.CheckVerificationCodeResponse.getDefaultInstance();
    }

    @java.lang.Override
    public org.signal.registration.rpc.CheckVerificationCodeResponse build() {
      org.signal.registration.rpc.CheckVerificationCodeResponse result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public org.signal.registration.rpc.CheckVerificationCodeResponse buildPartial() {
      org.signal.registration.rpc.CheckVerificationCodeResponse result = new org.signal.registration.rpc.CheckVerificationCodeResponse(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(org.signal.registration.rpc.CheckVerificationCodeResponse result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.sessionMetadata_ = sessionMetadataBuilder_ == null
            ? sessionMetadata_
            : sessionMetadataBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.error_ = errorBuilder_ == null
            ? error_
            : errorBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.signal.registration.rpc.CheckVerificationCodeResponse) {
        return mergeFrom((org.signal.registration.rpc.CheckVerificationCodeResponse)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.signal.registration.rpc.CheckVerificationCodeResponse other) {
      if (other == org.signal.registration.rpc.CheckVerificationCodeResponse.getDefaultInstance()) return this;
      if (other.hasSessionMetadata()) {
        mergeSessionMetadata(other.getSessionMetadata());
      }
      if (other.hasError()) {
        mergeError(other.getError());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 18: {
              input.readMessage(
                  getSessionMetadataFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getErrorFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private org.signal.registration.rpc.RegistrationSessionMetadata sessionMetadata_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.signal.registration.rpc.RegistrationSessionMetadata, org.signal.registration.rpc.RegistrationSessionMetadata.Builder, org.signal.registration.rpc.RegistrationSessionMetadataOrBuilder> sessionMetadataBuilder_;
    /**
     * <pre>
     **
     * Metadata for the named session. May be absent if the session could not be
     * found or has expired.
     * </pre>
     *
     * <code>.org.signal.registration.rpc.RegistrationSessionMetadata session_metadata = 2;</code>
     * @return Whether the sessionMetadata field is set.
     */
    public boolean hasSessionMetadata() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     **
     * Metadata for the named session. May be absent if the session could not be
     * found or has expired.
     * </pre>
     *
     * <code>.org.signal.registration.rpc.RegistrationSessionMetadata session_metadata = 2;</code>
     * @return The sessionMetadata.
     */
    public org.signal.registration.rpc.RegistrationSessionMetadata getSessionMetadata() {
      if (sessionMetadataBuilder_ == null) {
        return sessionMetadata_ == null ? org.signal.registration.rpc.RegistrationSessionMetadata.getDefaultInstance() : sessionMetadata_;
      } else {
        return sessionMetadataBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     **
     * Metadata for the named session. May be absent if the session could not be
     * found or has expired.
     * </pre>
     *
     * <code>.org.signal.registration.rpc.RegistrationSessionMetadata session_metadata = 2;</code>
     */
    public Builder setSessionMetadata(org.signal.registration.rpc.RegistrationSessionMetadata value) {
      if (sessionMetadataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        sessionMetadata_ = value;
      } else {
        sessionMetadataBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     **
     * Metadata for the named session. May be absent if the session could not be
     * found or has expired.
     * </pre>
     *
     * <code>.org.signal.registration.rpc.RegistrationSessionMetadata session_metadata = 2;</code>
     */
    public Builder setSessionMetadata(
        org.signal.registration.rpc.RegistrationSessionMetadata.Builder builderForValue) {
      if (sessionMetadataBuilder_ == null) {
        sessionMetadata_ = builderForValue.build();
      } else {
        sessionMetadataBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     **
     * Metadata for the named session. May be absent if the session could not be
     * found or has expired.
     * </pre>
     *
     * <code>.org.signal.registration.rpc.RegistrationSessionMetadata session_metadata = 2;</code>
     */
    public Builder mergeSessionMetadata(org.signal.registration.rpc.RegistrationSessionMetadata value) {
      if (sessionMetadataBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          sessionMetadata_ != null &&
          sessionMetadata_ != org.signal.registration.rpc.RegistrationSessionMetadata.getDefaultInstance()) {
          getSessionMetadataBuilder().mergeFrom(value);
        } else {
          sessionMetadata_ = value;
        }
      } else {
        sessionMetadataBuilder_.mergeFrom(value);
      }
      if (sessionMetadata_ != null) {
        bitField0_ |= 0x00000001;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     **
     * Metadata for the named session. May be absent if the session could not be
     * found or has expired.
     * </pre>
     *
     * <code>.org.signal.registration.rpc.RegistrationSessionMetadata session_metadata = 2;</code>
     */
    public Builder clearSessionMetadata() {
      bitField0_ = (bitField0_ & ~0x00000001);
      sessionMetadata_ = null;
      if (sessionMetadataBuilder_ != null) {
        sessionMetadataBuilder_.dispose();
        sessionMetadataBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     **
     * Metadata for the named session. May be absent if the session could not be
     * found or has expired.
     * </pre>
     *
     * <code>.org.signal.registration.rpc.RegistrationSessionMetadata session_metadata = 2;</code>
     */
    public org.signal.registration.rpc.RegistrationSessionMetadata.Builder getSessionMetadataBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getSessionMetadataFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     **
     * Metadata for the named session. May be absent if the session could not be
     * found or has expired.
     * </pre>
     *
     * <code>.org.signal.registration.rpc.RegistrationSessionMetadata session_metadata = 2;</code>
     */
    public org.signal.registration.rpc.RegistrationSessionMetadataOrBuilder getSessionMetadataOrBuilder() {
      if (sessionMetadataBuilder_ != null) {
        return sessionMetadataBuilder_.getMessageOrBuilder();
      } else {
        return sessionMetadata_ == null ?
            org.signal.registration.rpc.RegistrationSessionMetadata.getDefaultInstance() : sessionMetadata_;
      }
    }
    /**
     * <pre>
     **
     * Metadata for the named session. May be absent if the session could not be
     * found or has expired.
     * </pre>
     *
     * <code>.org.signal.registration.rpc.RegistrationSessionMetadata session_metadata = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.signal.registration.rpc.RegistrationSessionMetadata, org.signal.registration.rpc.RegistrationSessionMetadata.Builder, org.signal.registration.rpc.RegistrationSessionMetadataOrBuilder> 
        getSessionMetadataFieldBuilder() {
      if (sessionMetadataBuilder_ == null) {
        sessionMetadataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.signal.registration.rpc.RegistrationSessionMetadata, org.signal.registration.rpc.RegistrationSessionMetadata.Builder, org.signal.registration.rpc.RegistrationSessionMetadataOrBuilder>(
                getSessionMetadata(),
                getParentForChildren(),
                isClean());
        sessionMetadata_ = null;
      }
      return sessionMetadataBuilder_;
    }

    private org.signal.registration.rpc.CheckVerificationCodeError error_;
    private com.google.protobuf.SingleFieldBuilderV3<
        org.signal.registration.rpc.CheckVerificationCodeError, org.signal.registration.rpc.CheckVerificationCodeError.Builder, org.signal.registration.rpc.CheckVerificationCodeErrorOrBuilder> errorBuilder_;
    /**
     * <pre>
     **
     * If a code could not be checked, explains the underlying error. Will be
     * absent if no error occurred. Note that both an error and session
     * metadata may be present in the same response because the session metadata
     * may include information helpful for resolving the underlying error (i.e.
     * "next attempt" times).
     * </pre>
     *
     * <code>.org.signal.registration.rpc.CheckVerificationCodeError error = 3;</code>
     * @return Whether the error field is set.
     */
    public boolean hasError() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     **
     * If a code could not be checked, explains the underlying error. Will be
     * absent if no error occurred. Note that both an error and session
     * metadata may be present in the same response because the session metadata
     * may include information helpful for resolving the underlying error (i.e.
     * "next attempt" times).
     * </pre>
     *
     * <code>.org.signal.registration.rpc.CheckVerificationCodeError error = 3;</code>
     * @return The error.
     */
    public org.signal.registration.rpc.CheckVerificationCodeError getError() {
      if (errorBuilder_ == null) {
        return error_ == null ? org.signal.registration.rpc.CheckVerificationCodeError.getDefaultInstance() : error_;
      } else {
        return errorBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     **
     * If a code could not be checked, explains the underlying error. Will be
     * absent if no error occurred. Note that both an error and session
     * metadata may be present in the same response because the session metadata
     * may include information helpful for resolving the underlying error (i.e.
     * "next attempt" times).
     * </pre>
     *
     * <code>.org.signal.registration.rpc.CheckVerificationCodeError error = 3;</code>
     */
    public Builder setError(org.signal.registration.rpc.CheckVerificationCodeError value) {
      if (errorBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        error_ = value;
      } else {
        errorBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     **
     * If a code could not be checked, explains the underlying error. Will be
     * absent if no error occurred. Note that both an error and session
     * metadata may be present in the same response because the session metadata
     * may include information helpful for resolving the underlying error (i.e.
     * "next attempt" times).
     * </pre>
     *
     * <code>.org.signal.registration.rpc.CheckVerificationCodeError error = 3;</code>
     */
    public Builder setError(
        org.signal.registration.rpc.CheckVerificationCodeError.Builder builderForValue) {
      if (errorBuilder_ == null) {
        error_ = builderForValue.build();
      } else {
        errorBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     **
     * If a code could not be checked, explains the underlying error. Will be
     * absent if no error occurred. Note that both an error and session
     * metadata may be present in the same response because the session metadata
     * may include information helpful for resolving the underlying error (i.e.
     * "next attempt" times).
     * </pre>
     *
     * <code>.org.signal.registration.rpc.CheckVerificationCodeError error = 3;</code>
     */
    public Builder mergeError(org.signal.registration.rpc.CheckVerificationCodeError value) {
      if (errorBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          error_ != null &&
          error_ != org.signal.registration.rpc.CheckVerificationCodeError.getDefaultInstance()) {
          getErrorBuilder().mergeFrom(value);
        } else {
          error_ = value;
        }
      } else {
        errorBuilder_.mergeFrom(value);
      }
      if (error_ != null) {
        bitField0_ |= 0x00000002;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     **
     * If a code could not be checked, explains the underlying error. Will be
     * absent if no error occurred. Note that both an error and session
     * metadata may be present in the same response because the session metadata
     * may include information helpful for resolving the underlying error (i.e.
     * "next attempt" times).
     * </pre>
     *
     * <code>.org.signal.registration.rpc.CheckVerificationCodeError error = 3;</code>
     */
    public Builder clearError() {
      bitField0_ = (bitField0_ & ~0x00000002);
      error_ = null;
      if (errorBuilder_ != null) {
        errorBuilder_.dispose();
        errorBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     **
     * If a code could not be checked, explains the underlying error. Will be
     * absent if no error occurred. Note that both an error and session
     * metadata may be present in the same response because the session metadata
     * may include information helpful for resolving the underlying error (i.e.
     * "next attempt" times).
     * </pre>
     *
     * <code>.org.signal.registration.rpc.CheckVerificationCodeError error = 3;</code>
     */
    public org.signal.registration.rpc.CheckVerificationCodeError.Builder getErrorBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getErrorFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     **
     * If a code could not be checked, explains the underlying error. Will be
     * absent if no error occurred. Note that both an error and session
     * metadata may be present in the same response because the session metadata
     * may include information helpful for resolving the underlying error (i.e.
     * "next attempt" times).
     * </pre>
     *
     * <code>.org.signal.registration.rpc.CheckVerificationCodeError error = 3;</code>
     */
    public org.signal.registration.rpc.CheckVerificationCodeErrorOrBuilder getErrorOrBuilder() {
      if (errorBuilder_ != null) {
        return errorBuilder_.getMessageOrBuilder();
      } else {
        return error_ == null ?
            org.signal.registration.rpc.CheckVerificationCodeError.getDefaultInstance() : error_;
      }
    }
    /**
     * <pre>
     **
     * If a code could not be checked, explains the underlying error. Will be
     * absent if no error occurred. Note that both an error and session
     * metadata may be present in the same response because the session metadata
     * may include information helpful for resolving the underlying error (i.e.
     * "next attempt" times).
     * </pre>
     *
     * <code>.org.signal.registration.rpc.CheckVerificationCodeError error = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        org.signal.registration.rpc.CheckVerificationCodeError, org.signal.registration.rpc.CheckVerificationCodeError.Builder, org.signal.registration.rpc.CheckVerificationCodeErrorOrBuilder> 
        getErrorFieldBuilder() {
      if (errorBuilder_ == null) {
        errorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            org.signal.registration.rpc.CheckVerificationCodeError, org.signal.registration.rpc.CheckVerificationCodeError.Builder, org.signal.registration.rpc.CheckVerificationCodeErrorOrBuilder>(
                getError(),
                getParentForChildren(),
                isClean());
        error_ = null;
      }
      return errorBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:org.signal.registration.rpc.CheckVerificationCodeResponse)
  }

  // @@protoc_insertion_point(class_scope:org.signal.registration.rpc.CheckVerificationCodeResponse)
  private static final org.signal.registration.rpc.CheckVerificationCodeResponse DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.signal.registration.rpc.CheckVerificationCodeResponse();
  }

  public static org.signal.registration.rpc.CheckVerificationCodeResponse getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<CheckVerificationCodeResponse>
      PARSER = new com.google.protobuf.AbstractParser<CheckVerificationCodeResponse>() {
    @java.lang.Override
    public CheckVerificationCodeResponse parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<CheckVerificationCodeResponse> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CheckVerificationCodeResponse> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public org.signal.registration.rpc.CheckVerificationCodeResponse getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

